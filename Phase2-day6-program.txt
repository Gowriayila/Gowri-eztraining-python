BST-deletion:
class Node:
    def __init__(self,key):
         self.left=None
         self.right=None
         self.key=key
#inorder-traversal
def inorder(root):
    if root is not None:
        inorder(root.left)
        print(root.key)
        inorder(root.right)
def insert(node,key):
    if node is None:
        return Node(key)
    if key < node.key:
        node.left=insert(node.left,key)
    else:
        node.right=insert(node.right,key)
    return node
def minvaluenode(node):
    current=node
    while(current.left is not None):
        current=current.left
    return current
def deletenode(root,key):
    if root is None:
        return root
    if key<root.key:
        root.left=deletenode(root.left,key)
    elif(key>root.key):
        root.right=deletenode(root.right,key)
    else:
        if root.left is None:
            temp=root.right
            root=None
            return temp
        elif root.right is None:
            temp=root.left
            root=None
            return temp
        temp=minvaluenode(root.right)
        root.key=temp.key
        root.right=deletenode(root.right,temp.key)
    return root
root=None
root=insert(root,50)
root=insert(root,30)
root=insert(root,20)
root=insert(root,40)
root=insert(root,70)
root=insert(root,60)
root=insert(root,80)
print("inorder traversal of the given tree")
inorder(root)
print("\ndelete 20")
root=deletenode(root,20)
print("inorder traversal of the modified tree")
inorder(root)
print("\ndelete 30")
root=deletenode(root,30)
print("inorder traversal of the modified tree")
inorder(root)
print("\ndelete 50")
root=deletenode(root,50)
print("inorder traversal of the modified tree")
inorder(root)
---------------------------------------------------------------------------------

implementation of graph using default dict:
#import dictionary for graph
from collections import defaultdict
 #add edge to graph:function
graph=defaultdict(list)
def addEdge(graph,u,v):
    graph[u].append(v)
#function descripition
def generate_edges(graph):
    edges=[]
    #for each node in graph
    for node in graph:
        #for each neighour node of a single node
        for neighbour in graph[node]:
            #if edge exists then append
            edges.append((node,neighbour))
    return edges
#declaring-graph as dictionary
addEdge(graph,'a','c')
addEdge(graph,'b','c')
addEdge(graph,'b','e')
addEdge(graph,'c','d')
addEdge(graph,'c','e')
addEdge(graph,'c','a')
addEdge(graph,'c','b')
addEdge(graph,'e','b')
addEdge(graph,'d','c')
addEdge(graph,'e','c')
print(generate_edges(graph))
---------------------------------------------------------------------------------

